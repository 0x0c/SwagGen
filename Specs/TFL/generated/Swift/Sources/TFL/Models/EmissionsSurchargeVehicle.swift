//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EmissionsSurchargeVehicle: Codable {

    public enum Compliance: String, Codable {
        case notCompliant = "NotCompliant"
        case compliant = "Compliant"
        case exempt = "Exempt"

        public static let cases: [Compliance] = [
          .notCompliant,
          .compliant,
          .exempt,
        ]
    }

    public var colour: String?

    public var compliance: Compliance?

    public var make: String?

    public var model: String?

    public var type: String?

    public var vrm: String?

    public init(colour: String? = nil, compliance: Compliance? = nil, make: String? = nil, model: String? = nil, type: String? = nil, vrm: String? = nil) {
        self.colour = colour
        self.compliance = compliance
        self.make = make
        self.model = model
        self.type = type
        self.vrm = vrm
    }

    private enum CodingKeys: String, CodingKey {
        case colour
        case compliance
        case make
        case model
        case type
        case vrm
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        colour = try container.decodeIfPresent(.colour)
        compliance = try container.decodeIfPresent(.compliance)
        make = try container.decodeIfPresent(.make)
        model = try container.decodeIfPresent(.model)
        type = try container.decodeIfPresent(.type)
        vrm = try container.decodeIfPresent(.vrm)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(colour, forKey: .colour)
        try container.encode(compliance, forKey: .compliance)
        try container.encode(make, forKey: .make)
        try container.encode(model, forKey: .model)
        try container.encode(type, forKey: .type)
        try container.encode(vrm, forKey: .vrm)
    }
}
