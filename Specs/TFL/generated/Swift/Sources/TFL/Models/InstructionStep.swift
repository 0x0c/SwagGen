//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class InstructionStep: Codable {

    public enum SkyDirectionDescription: String, Codable {
        case north = "North"
        case northEast = "NorthEast"
        case east = "East"
        case southEast = "SouthEast"
        case south = "South"
        case southWest = "SouthWest"
        case west = "West"
        case northWest = "NorthWest"

        public static let cases: [SkyDirectionDescription] = [
          .north,
          .northEast,
          .east,
          .southEast,
          .south,
          .southWest,
          .west,
          .northWest,
        ]
    }

    public enum TrackType: String, Codable {
        case cycleSuperHighway = "CycleSuperHighway"
        case canalTowpath = "CanalTowpath"
        case quietRoad = "QuietRoad"
        case provisionForCyclists = "ProvisionForCyclists"
        case busyRoads = "BusyRoads"
        case none = "None"
        case pushBike = "PushBike"

        public static let cases: [TrackType] = [
          .cycleSuperHighway,
          .canalTowpath,
          .quietRoad,
          .provisionForCyclists,
          .busyRoads,
          .none,
          .pushBike,
        ]
    }

    public var cumulativeDistance: Int?

    public var cumulativeTravelTime: Int?

    public var description: String?

    public var descriptionHeading: String?

    public var distance: Int?

    public var latitude: Double?

    public var longitude: Double?

    public var pathAttribute: PathAttribute?

    public var skyDirection: Int?

    public var skyDirectionDescription: SkyDirectionDescription?

    public var streetName: String?

    public var trackType: TrackType?

    public var turnDirection: String?

    public init(cumulativeDistance: Int? = nil, cumulativeTravelTime: Int? = nil, description: String? = nil, descriptionHeading: String? = nil, distance: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, pathAttribute: PathAttribute? = nil, skyDirection: Int? = nil, skyDirectionDescription: SkyDirectionDescription? = nil, streetName: String? = nil, trackType: TrackType? = nil, turnDirection: String? = nil) {
        self.cumulativeDistance = cumulativeDistance
        self.cumulativeTravelTime = cumulativeTravelTime
        self.description = description
        self.descriptionHeading = descriptionHeading
        self.distance = distance
        self.latitude = latitude
        self.longitude = longitude
        self.pathAttribute = pathAttribute
        self.skyDirection = skyDirection
        self.skyDirectionDescription = skyDirectionDescription
        self.streetName = streetName
        self.trackType = trackType
        self.turnDirection = turnDirection
    }

    private enum CodingKeys: String, CodingKey {
        case cumulativeDistance
        case cumulativeTravelTime
        case description
        case descriptionHeading
        case distance
        case latitude
        case longitude
        case pathAttribute
        case skyDirection
        case skyDirectionDescription
        case streetName
        case trackType
        case turnDirection
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        cumulativeDistance = try container.decodeIfPresent(.cumulativeDistance)
        cumulativeTravelTime = try container.decodeIfPresent(.cumulativeTravelTime)
        description = try container.decodeIfPresent(.description)
        descriptionHeading = try container.decodeIfPresent(.descriptionHeading)
        distance = try container.decodeIfPresent(.distance)
        latitude = try container.decodeIfPresent(.latitude)
        longitude = try container.decodeIfPresent(.longitude)
        pathAttribute = try container.decodeIfPresent(.pathAttribute)
        skyDirection = try container.decodeIfPresent(.skyDirection)
        skyDirectionDescription = try container.decodeIfPresent(.skyDirectionDescription)
        streetName = try container.decodeIfPresent(.streetName)
        trackType = try container.decodeIfPresent(.trackType)
        turnDirection = try container.decodeIfPresent(.turnDirection)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(cumulativeDistance, forKey: .cumulativeDistance)
        try container.encode(cumulativeTravelTime, forKey: .cumulativeTravelTime)
        try container.encode(description, forKey: .description)
        try container.encode(descriptionHeading, forKey: .descriptionHeading)
        try container.encode(distance, forKey: .distance)
        try container.encode(latitude, forKey: .latitude)
        try container.encode(longitude, forKey: .longitude)
        try container.encode(pathAttribute, forKey: .pathAttribute)
        try container.encode(skyDirection, forKey: .skyDirection)
        try container.encode(skyDirectionDescription, forKey: .skyDirectionDescription)
        try container.encode(streetName, forKey: .streetName)
        try container.encode(trackType, forKey: .trackType)
        try container.encode(turnDirection, forKey: .turnDirection)
    }
}
