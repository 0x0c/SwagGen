//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Street: Codable {

    /** Type of road closure. Some example values:
            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
            Partial Closure = road is partially blocked, closed or restricted. 
            Full Closure = road is fully blocked or closed. */
    public var closure: String?

    /** The direction of the disruption on the street. Some example values:
            All Directions
            All Approaches
            Clockwise
            Anti-Clockwise
            Northbound
            Eastbound
            Southbound
            Westbound
            Both Directions */
    public var directions: String?

    /** Street name */
    public var name: String?

    /** Geographic description of the sections of this street that are affected. */
    public var segments: [StreetSegment]?

    /** The ID from the source system of the disruption that this street belongs to. */
    public var sourceSystemId: Int?

    /** The key of the source system of the disruption that this street belongs to. */
    public var sourceSystemKey: String?

    public init(closure: String? = nil, directions: String? = nil, name: String? = nil, segments: [StreetSegment]? = nil, sourceSystemId: Int? = nil, sourceSystemKey: String? = nil) {
        self.closure = closure
        self.directions = directions
        self.name = name
        self.segments = segments
        self.sourceSystemId = sourceSystemId
        self.sourceSystemKey = sourceSystemKey
    }

    private enum CodingKeys: String, CodingKey {
        case closure
        case directions
        case name
        case segments
        case sourceSystemId
        case sourceSystemKey
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        closure = try container.decodeIfPresent(.closure)
        directions = try container.decodeIfPresent(.directions)
        name = try container.decodeIfPresent(.name)
        segments = try container.decodeIfPresent(.segments)
        sourceSystemId = try container.decodeIfPresent(.sourceSystemId)
        sourceSystemKey = try container.decodeIfPresent(.sourceSystemKey)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(closure, forKey: .closure)
        try container.encode(directions, forKey: .directions)
        try container.encode(name, forKey: .name)
        try container.encode(segments, forKey: .segments)
        try container.encode(sourceSystemId, forKey: .sourceSystemId)
        try container.encode(sourceSystemKey, forKey: .sourceSystemKey)
    }
}
