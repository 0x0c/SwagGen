//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A paged response containing StopPoints */
public class StopPointsResponse: Codable {

    /** The centre latitude/longitude of this list of StopPoints */
    public var centrePoint: [Double]?

    /** The index of this page */
    public var page: Int?

    /** The maximum size of the page in this response i.e. the maximum number of StopPoints */
    public var pageSize: Int?

    /** Collection of stop points */
    public var stopPoints: [StopPoint]?

    /** The total number of StopPoints available across all pages */
    public var total: Int?

    public init(centrePoint: [Double]? = nil, page: Int? = nil, pageSize: Int? = nil, stopPoints: [StopPoint]? = nil, total: Int? = nil) {
        self.centrePoint = centrePoint
        self.page = page
        self.pageSize = pageSize
        self.stopPoints = stopPoints
        self.total = total
    }

    private enum CodingKeys: String, CodingKey {
        case centrePoint
        case page
        case pageSize
        case stopPoints
        case total
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        centrePoint = try container.decodeIfPresent(.centrePoint)
        page = try container.decodeIfPresent(.page)
        pageSize = try container.decodeIfPresent(.pageSize)
        stopPoints = try container.decodeIfPresent(.stopPoints)
        total = try container.decodeIfPresent(.total)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(centrePoint, forKey: .centrePoint)
        try container.encode(page, forKey: .page)
        try container.encode(pageSize, forKey: .pageSize)
        try container.encode(stopPoints, forKey: .stopPoints)
        try container.encode(total, forKey: .total)
    }
}
