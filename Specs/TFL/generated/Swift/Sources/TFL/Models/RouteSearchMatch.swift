//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class RouteSearchMatch: Codable {

    public var id: String?

    public var lat: Double?

    public var lineId: String?

    public var lineName: String?

    public var lineRouteSection: [LineRouteSection]?

    public var lon: Double?

    public var matchedRouteSections: [MatchedRouteSections]?

    public var matchedStops: [MatchedStop]?

    public var mode: String?

    public var name: String?

    public var url: String?

    public init(id: String? = nil, lat: Double? = nil, lineId: String? = nil, lineName: String? = nil, lineRouteSection: [LineRouteSection]? = nil, lon: Double? = nil, matchedRouteSections: [MatchedRouteSections]? = nil, matchedStops: [MatchedStop]? = nil, mode: String? = nil, name: String? = nil, url: String? = nil) {
        self.id = id
        self.lat = lat
        self.lineId = lineId
        self.lineName = lineName
        self.lineRouteSection = lineRouteSection
        self.lon = lon
        self.matchedRouteSections = matchedRouteSections
        self.matchedStops = matchedStops
        self.mode = mode
        self.name = name
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case lat
        case lineId
        case lineName
        case lineRouteSection
        case lon
        case matchedRouteSections
        case matchedStops
        case mode
        case name
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(.id)
        lat = try container.decodeIfPresent(.lat)
        lineId = try container.decodeIfPresent(.lineId)
        lineName = try container.decodeIfPresent(.lineName)
        lineRouteSection = try container.decodeIfPresent(.lineRouteSection)
        lon = try container.decodeIfPresent(.lon)
        matchedRouteSections = try container.decodeIfPresent(.matchedRouteSections)
        matchedStops = try container.decodeIfPresent(.matchedStops)
        mode = try container.decodeIfPresent(.mode)
        name = try container.decodeIfPresent(.name)
        url = try container.decodeIfPresent(.url)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(lat, forKey: .lat)
        try container.encode(lineId, forKey: .lineId)
        try container.encode(lineName, forKey: .lineName)
        try container.encode(lineRouteSection, forKey: .lineRouteSection)
        try container.encode(lon, forKey: .lon)
        try container.encode(matchedRouteSections, forKey: .matchedRouteSections)
        try container.encode(matchedStops, forKey: .matchedStops)
        try container.encode(mode, forKey: .mode)
        try container.encode(name, forKey: .name)
        try container.encode(url, forKey: .url)
    }
}
