//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class FareDetails: Codable {

    public var boundsId: Int?

    public var displayName: String?

    public var displayOrder: Int?

    public var endDate: Date?

    public var from: String?

    public var fromStation: String?

    public var isTour: Bool?

    public var messages: [Message]?

    public var mode: String?

    public var `operator`: String?

    public var passengerType: String?

    public var routeCode: String?

    public var routeDescription: String?

    public var specialFare: Bool?

    public var startDate: Date?

    public var throughFare: Bool?

    public var ticketsAvailable: [Ticket]?

    public var to: String?

    public var toStation: String?

    public var validatorInformation: String?

    public var via: String?

    public init(boundsId: Int? = nil, displayName: String? = nil, displayOrder: Int? = nil, endDate: Date? = nil, from: String? = nil, fromStation: String? = nil, isTour: Bool? = nil, messages: [Message]? = nil, mode: String? = nil, `operator`: String? = nil, passengerType: String? = nil, routeCode: String? = nil, routeDescription: String? = nil, specialFare: Bool? = nil, startDate: Date? = nil, throughFare: Bool? = nil, ticketsAvailable: [Ticket]? = nil, to: String? = nil, toStation: String? = nil, validatorInformation: String? = nil, via: String? = nil) {
        self.boundsId = boundsId
        self.displayName = displayName
        self.displayOrder = displayOrder
        self.endDate = endDate
        self.from = from
        self.fromStation = fromStation
        self.isTour = isTour
        self.messages = messages
        self.mode = mode
        self.`operator` = `operator`
        self.passengerType = passengerType
        self.routeCode = routeCode
        self.routeDescription = routeDescription
        self.specialFare = specialFare
        self.startDate = startDate
        self.throughFare = throughFare
        self.ticketsAvailable = ticketsAvailable
        self.to = to
        self.toStation = toStation
        self.validatorInformation = validatorInformation
        self.via = via
    }

    private enum CodingKeys: String, CodingKey {
        case boundsId
        case displayName
        case displayOrder
        case endDate
        case from
        case fromStation
        case isTour
        case messages
        case mode
        case `operator` = "operator"
        case passengerType
        case routeCode
        case routeDescription
        case specialFare
        case startDate
        case throughFare
        case ticketsAvailable
        case to
        case toStation
        case validatorInformation
        case via
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        boundsId = try container.decodeIfPresent(.boundsId)
        displayName = try container.decodeIfPresent(.displayName)
        displayOrder = try container.decodeIfPresent(.displayOrder)
        endDate = try container.decodeIfPresent(.endDate)
        from = try container.decodeIfPresent(.from)
        fromStation = try container.decodeIfPresent(.fromStation)
        isTour = try container.decodeIfPresent(.isTour)
        messages = try container.decodeIfPresent(.messages)
        mode = try container.decodeIfPresent(.mode)
        `operator` = try container.decodeIfPresent(.`operator`)
        passengerType = try container.decodeIfPresent(.passengerType)
        routeCode = try container.decodeIfPresent(.routeCode)
        routeDescription = try container.decodeIfPresent(.routeDescription)
        specialFare = try container.decodeIfPresent(.specialFare)
        startDate = try container.decodeIfPresent(.startDate)
        throughFare = try container.decodeIfPresent(.throughFare)
        ticketsAvailable = try container.decodeIfPresent(.ticketsAvailable)
        to = try container.decodeIfPresent(.to)
        toStation = try container.decodeIfPresent(.toStation)
        validatorInformation = try container.decodeIfPresent(.validatorInformation)
        via = try container.decodeIfPresent(.via)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(boundsId, forKey: .boundsId)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(displayOrder, forKey: .displayOrder)
        try container.encode(endDate, forKey: .endDate)
        try container.encode(from, forKey: .from)
        try container.encode(fromStation, forKey: .fromStation)
        try container.encode(isTour, forKey: .isTour)
        try container.encode(messages, forKey: .messages)
        try container.encode(mode, forKey: .mode)
        try container.encode(`operator`, forKey: .`operator`)
        try container.encode(passengerType, forKey: .passengerType)
        try container.encode(routeCode, forKey: .routeCode)
        try container.encode(routeDescription, forKey: .routeDescription)
        try container.encode(specialFare, forKey: .specialFare)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(throughFare, forKey: .throughFare)
        try container.encode(ticketsAvailable, forKey: .ticketsAvailable)
        try container.encode(to, forKey: .to)
        try container.encode(toStation, forKey: .toStation)
        try container.encode(validatorInformation, forKey: .validatorInformation)
        try container.encode(via, forKey: .via)
    }
}
