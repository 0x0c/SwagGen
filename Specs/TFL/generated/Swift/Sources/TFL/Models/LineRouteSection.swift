//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class LineRouteSection: Codable {

    public var destination: String?

    public var direction: String?

    public var fromStation: String?

    public var routeId: Int?

    public var serviceType: String?

    public var toStation: String?

    public var vehicleDestinationText: String?

    public init(destination: String? = nil, direction: String? = nil, fromStation: String? = nil, routeId: Int? = nil, serviceType: String? = nil, toStation: String? = nil, vehicleDestinationText: String? = nil) {
        self.destination = destination
        self.direction = direction
        self.fromStation = fromStation
        self.routeId = routeId
        self.serviceType = serviceType
        self.toStation = toStation
        self.vehicleDestinationText = vehicleDestinationText
    }

    private enum CodingKeys: String, CodingKey {
        case destination
        case direction
        case fromStation
        case routeId
        case serviceType
        case toStation
        case vehicleDestinationText
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destination = try container.decodeIfPresent(.destination)
        direction = try container.decodeIfPresent(.direction)
        fromStation = try container.decodeIfPresent(.fromStation)
        routeId = try container.decodeIfPresent(.routeId)
        serviceType = try container.decodeIfPresent(.serviceType)
        toStation = try container.decodeIfPresent(.toStation)
        vehicleDestinationText = try container.decodeIfPresent(.vehicleDestinationText)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(destination, forKey: .destination)
        try container.encode(direction, forKey: .direction)
        try container.encode(fromStation, forKey: .fromStation)
        try container.encode(routeId, forKey: .routeId)
        try container.encode(serviceType, forKey: .serviceType)
        try container.encode(toStation, forKey: .toStation)
        try container.encode(vehicleDestinationText, forKey: .vehicleDestinationText)
    }
}
