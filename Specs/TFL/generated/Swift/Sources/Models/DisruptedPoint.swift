//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DisruptedPoint: Codable, Equatable {

    public var additionalInformation: String?

    public var appearance: String?

    public var atcoCode: String?

    public var commonName: String?

    public var description: String?

    public var fromDate: Date?

    public var mode: String?

    public var stationAtcoCode: String?

    public var toDate: Date?

    public var type: String?

    public init(additionalInformation: String? = nil, appearance: String? = nil, atcoCode: String? = nil, commonName: String? = nil, description: String? = nil, fromDate: Date? = nil, mode: String? = nil, stationAtcoCode: String? = nil, toDate: Date? = nil, type: String? = nil) {
        self.additionalInformation = additionalInformation
        self.appearance = appearance
        self.atcoCode = atcoCode
        self.commonName = commonName
        self.description = description
        self.fromDate = fromDate
        self.mode = mode
        self.stationAtcoCode = stationAtcoCode
        self.toDate = toDate
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case additionalInformation
        case appearance
        case atcoCode
        case commonName
        case description
        case fromDate
        case mode
        case stationAtcoCode
        case toDate
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        additionalInformation = try container.decodeIfPresent(.additionalInformation)
        appearance = try container.decodeIfPresent(.appearance)
        atcoCode = try container.decodeIfPresent(.atcoCode)
        commonName = try container.decodeIfPresent(.commonName)
        description = try container.decodeIfPresent(.description)
        fromDate = try container.decodeIfPresent(.fromDate)
        mode = try container.decodeIfPresent(.mode)
        stationAtcoCode = try container.decodeIfPresent(.stationAtcoCode)
        toDate = try container.decodeIfPresent(.toDate)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(additionalInformation, forKey: .additionalInformation)
        try container.encode(appearance, forKey: .appearance)
        try container.encode(atcoCode, forKey: .atcoCode)
        try container.encode(commonName, forKey: .commonName)
        try container.encode(description, forKey: .description)
        try container.encode(fromDate, forKey: .fromDate)
        try container.encode(mode, forKey: .mode)
        try container.encode(stationAtcoCode, forKey: .stationAtcoCode)
        try container.encode(toDate, forKey: .toDate)
        try container.encode(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DisruptedPoint else { return false }
      guard self.additionalInformation == object.additionalInformation else { return false }
      guard self.appearance == object.appearance else { return false }
      guard self.atcoCode == object.atcoCode else { return false }
      guard self.commonName == object.commonName else { return false }
      guard self.description == object.description else { return false }
      guard self.fromDate == object.fromDate else { return false }
      guard self.mode == object.mode else { return false }
      guard self.stationAtcoCode == object.stationAtcoCode else { return false }
      guard self.toDate == object.toDate else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: DisruptedPoint, rhs: DisruptedPoint) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
