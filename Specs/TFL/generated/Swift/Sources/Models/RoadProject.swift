//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class RoadProject: Codable {

    public enum Phase: String, Codable {
        case unscoped = "Unscoped"
        case concept = "Concept"
        case consultationEnded = "ConsultationEnded"
        case consultation = "Consultation"
        case construction = "Construction"
        case complete = "Complete"

        public static let cases: [Phase] = [
          .unscoped,
          .concept,
          .consultationEnded,
          .consultation,
          .construction,
          .complete,
        ]
    }

    public var boroughsBenefited: [String]?

    public var constructionEndDate: Date?

    public var constructionStartDate: Date?

    public var consultationEndDate: Date?

    public var consultationPageUrl: String?

    public var consultationStartDate: Date?

    public var contactEmail: String?

    public var contactName: String?

    public var cycleSuperhighwayId: String?

    public var externalPageUrl: String?

    public var phase: Phase?

    public var projectDescription: String?

    public var projectId: String?

    public var projectName: String?

    public var projectPageUrl: String?

    public var projectSummaryPageUrl: String?

    public var schemeName: String?

    public init(boroughsBenefited: [String]? = nil, constructionEndDate: Date? = nil, constructionStartDate: Date? = nil, consultationEndDate: Date? = nil, consultationPageUrl: String? = nil, consultationStartDate: Date? = nil, contactEmail: String? = nil, contactName: String? = nil, cycleSuperhighwayId: String? = nil, externalPageUrl: String? = nil, phase: Phase? = nil, projectDescription: String? = nil, projectId: String? = nil, projectName: String? = nil, projectPageUrl: String? = nil, projectSummaryPageUrl: String? = nil, schemeName: String? = nil) {
        self.boroughsBenefited = boroughsBenefited
        self.constructionEndDate = constructionEndDate
        self.constructionStartDate = constructionStartDate
        self.consultationEndDate = consultationEndDate
        self.consultationPageUrl = consultationPageUrl
        self.consultationStartDate = consultationStartDate
        self.contactEmail = contactEmail
        self.contactName = contactName
        self.cycleSuperhighwayId = cycleSuperhighwayId
        self.externalPageUrl = externalPageUrl
        self.phase = phase
        self.projectDescription = projectDescription
        self.projectId = projectId
        self.projectName = projectName
        self.projectPageUrl = projectPageUrl
        self.projectSummaryPageUrl = projectSummaryPageUrl
        self.schemeName = schemeName
    }

    private enum CodingKeys: String, CodingKey {
        case boroughsBenefited
        case constructionEndDate
        case constructionStartDate
        case consultationEndDate
        case consultationPageUrl
        case consultationStartDate
        case contactEmail
        case contactName
        case cycleSuperhighwayId
        case externalPageUrl
        case phase
        case projectDescription
        case projectId
        case projectName
        case projectPageUrl
        case projectSummaryPageUrl
        case schemeName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        boroughsBenefited = try container.decodeIfPresent(.boroughsBenefited)
        constructionEndDate = try container.decodeIfPresent(.constructionEndDate)
        constructionStartDate = try container.decodeIfPresent(.constructionStartDate)
        consultationEndDate = try container.decodeIfPresent(.consultationEndDate)
        consultationPageUrl = try container.decodeIfPresent(.consultationPageUrl)
        consultationStartDate = try container.decodeIfPresent(.consultationStartDate)
        contactEmail = try container.decodeIfPresent(.contactEmail)
        contactName = try container.decodeIfPresent(.contactName)
        cycleSuperhighwayId = try container.decodeIfPresent(.cycleSuperhighwayId)
        externalPageUrl = try container.decodeIfPresent(.externalPageUrl)
        phase = try container.decodeIfPresent(.phase)
        projectDescription = try container.decodeIfPresent(.projectDescription)
        projectId = try container.decodeIfPresent(.projectId)
        projectName = try container.decodeIfPresent(.projectName)
        projectPageUrl = try container.decodeIfPresent(.projectPageUrl)
        projectSummaryPageUrl = try container.decodeIfPresent(.projectSummaryPageUrl)
        schemeName = try container.decodeIfPresent(.schemeName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(boroughsBenefited, forKey: .boroughsBenefited)
        try container.encode(constructionEndDate, forKey: .constructionEndDate)
        try container.encode(constructionStartDate, forKey: .constructionStartDate)
        try container.encode(consultationEndDate, forKey: .consultationEndDate)
        try container.encode(consultationPageUrl, forKey: .consultationPageUrl)
        try container.encode(consultationStartDate, forKey: .consultationStartDate)
        try container.encode(contactEmail, forKey: .contactEmail)
        try container.encode(contactName, forKey: .contactName)
        try container.encode(cycleSuperhighwayId, forKey: .cycleSuperhighwayId)
        try container.encode(externalPageUrl, forKey: .externalPageUrl)
        try container.encode(phase, forKey: .phase)
        try container.encode(projectDescription, forKey: .projectDescription)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(projectName, forKey: .projectName)
        try container.encode(projectPageUrl, forKey: .projectPageUrl)
        try container.encode(projectSummaryPageUrl, forKey: .projectSummaryPageUrl)
        try container.encode(schemeName, forKey: .schemeName)
    }
}
