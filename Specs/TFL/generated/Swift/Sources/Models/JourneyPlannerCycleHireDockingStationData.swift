//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class JourneyPlannerCycleHireDockingStationData: Codable {

    public var destinationId: String?

    public var destinationNumberOfBikes: Int?

    public var destinationNumberOfEmptySlots: Int?

    public var originId: String?

    public var originNumberOfBikes: Int?

    public var originNumberOfEmptySlots: Int?

    public init(destinationId: String? = nil, destinationNumberOfBikes: Int? = nil, destinationNumberOfEmptySlots: Int? = nil, originId: String? = nil, originNumberOfBikes: Int? = nil, originNumberOfEmptySlots: Int? = nil) {
        self.destinationId = destinationId
        self.destinationNumberOfBikes = destinationNumberOfBikes
        self.destinationNumberOfEmptySlots = destinationNumberOfEmptySlots
        self.originId = originId
        self.originNumberOfBikes = originNumberOfBikes
        self.originNumberOfEmptySlots = originNumberOfEmptySlots
    }

    private enum CodingKeys: String, CodingKey {
        case destinationId
        case destinationNumberOfBikes
        case destinationNumberOfEmptySlots
        case originId
        case originNumberOfBikes
        case originNumberOfEmptySlots
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destinationId = try container.decodeIfPresent(.destinationId)
        destinationNumberOfBikes = try container.decodeIfPresent(.destinationNumberOfBikes)
        destinationNumberOfEmptySlots = try container.decodeIfPresent(.destinationNumberOfEmptySlots)
        originId = try container.decodeIfPresent(.originId)
        originNumberOfBikes = try container.decodeIfPresent(.originNumberOfBikes)
        originNumberOfEmptySlots = try container.decodeIfPresent(.originNumberOfEmptySlots)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(destinationId, forKey: .destinationId)
        try container.encode(destinationNumberOfBikes, forKey: .destinationNumberOfBikes)
        try container.encode(destinationNumberOfEmptySlots, forKey: .destinationNumberOfEmptySlots)
        try container.encode(originId, forKey: .originId)
        try container.encode(originNumberOfBikes, forKey: .originNumberOfBikes)
        try container.encode(originNumberOfEmptySlots, forKey: .originNumberOfEmptySlots)
    }
}
