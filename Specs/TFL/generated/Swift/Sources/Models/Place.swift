//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Place: Codable {

    /** A bag of additional key/value pairs with extra information about this place. */
    public var additionalProperties: [AdditionalProperties]?

    public var children: [Place]?

    public var childrenUrls: [String]?

    /** A human readable name. */
    public var commonName: String?

    /** The distance of the place from its search point, if this is the result
            of a geographical search, otherwise zero. */
    public var distance: Double?

    /** A unique identifier. */
    public var id: String?

    /** WGS84 latitude of the location. */
    public var lat: Double?

    /** WGS84 longitude of the location. */
    public var lon: Double?

    /** The type of Place. See /Place/Meta/placeTypes for possible values. */
    public var placeType: String?

    /** The unique location of this resource. */
    public var url: String?

    public init(additionalProperties: [AdditionalProperties]? = nil, children: [Place]? = nil, childrenUrls: [String]? = nil, commonName: String? = nil, distance: Double? = nil, id: String? = nil, lat: Double? = nil, lon: Double? = nil, placeType: String? = nil, url: String? = nil) {
        self.additionalProperties = additionalProperties
        self.children = children
        self.childrenUrls = childrenUrls
        self.commonName = commonName
        self.distance = distance
        self.id = id
        self.lat = lat
        self.lon = lon
        self.placeType = placeType
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case additionalProperties
        case children
        case childrenUrls
        case commonName
        case distance
        case id
        case lat
        case lon
        case placeType
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        additionalProperties = try container.decodeIfPresent(.additionalProperties)
        children = try container.decodeIfPresent(.children)
        childrenUrls = try container.decodeIfPresent(.childrenUrls)
        commonName = try container.decodeIfPresent(.commonName)
        distance = try container.decodeIfPresent(.distance)
        id = try container.decodeIfPresent(.id)
        lat = try container.decodeIfPresent(.lat)
        lon = try container.decodeIfPresent(.lon)
        placeType = try container.decodeIfPresent(.placeType)
        url = try container.decodeIfPresent(.url)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(additionalProperties, forKey: .additionalProperties)
        try container.encode(children, forKey: .children)
        try container.encode(childrenUrls, forKey: .childrenUrls)
        try container.encode(commonName, forKey: .commonName)
        try container.encode(distance, forKey: .distance)
        try container.encode(id, forKey: .id)
        try container.encode(lat, forKey: .lat)
        try container.encode(lon, forKey: .lon)
        try container.encode(placeType, forKey: .placeType)
        try container.encode(url, forKey: .url)
    }
}
