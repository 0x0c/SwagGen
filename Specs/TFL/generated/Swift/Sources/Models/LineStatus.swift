//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class LineStatus: Codable {

    public var created: Date?

    public var disruption: Disruption?

    public var id: Int?

    public var lineId: String?

    public var modified: Date?

    public var reason: String?

    public var statusSeverity: Int?

    public var statusSeverityDescription: String?

    public var validityPeriods: [ValidityPeriod]?

    public init(created: Date? = nil, disruption: Disruption? = nil, id: Int? = nil, lineId: String? = nil, modified: Date? = nil, reason: String? = nil, statusSeverity: Int? = nil, statusSeverityDescription: String? = nil, validityPeriods: [ValidityPeriod]? = nil) {
        self.created = created
        self.disruption = disruption
        self.id = id
        self.lineId = lineId
        self.modified = modified
        self.reason = reason
        self.statusSeverity = statusSeverity
        self.statusSeverityDescription = statusSeverityDescription
        self.validityPeriods = validityPeriods
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case disruption
        case id
        case lineId
        case modified
        case reason
        case statusSeverity
        case statusSeverityDescription
        case validityPeriods
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        created = try container.decodeIfPresent(.created)
        disruption = try container.decodeIfPresent(.disruption)
        id = try container.decodeIfPresent(.id)
        lineId = try container.decodeIfPresent(.lineId)
        modified = try container.decodeIfPresent(.modified)
        reason = try container.decodeIfPresent(.reason)
        statusSeverity = try container.decodeIfPresent(.statusSeverity)
        statusSeverityDescription = try container.decodeIfPresent(.statusSeverityDescription)
        validityPeriods = try container.decodeIfPresent(.validityPeriods)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(created, forKey: .created)
        try container.encode(disruption, forKey: .disruption)
        try container.encode(id, forKey: .id)
        try container.encode(lineId, forKey: .lineId)
        try container.encode(modified, forKey: .modified)
        try container.encode(reason, forKey: .reason)
        try container.encode(statusSeverity, forKey: .statusSeverity)
        try container.encode(statusSeverityDescription, forKey: .statusSeverityDescription)
        try container.encode(validityPeriods, forKey: .validityPeriods)
    }
}
