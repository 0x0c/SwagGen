//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PredictionTiming: Codable, Equatable {

    public var countdownServerAdjustment: String?

    public var insert: Date?

    public var read: Date?

    public var received: Date?

    public var sent: Date?

    public var source: Date?

    public init(countdownServerAdjustment: String? = nil, insert: Date? = nil, read: Date? = nil, received: Date? = nil, sent: Date? = nil, source: Date? = nil) {
        self.countdownServerAdjustment = countdownServerAdjustment
        self.insert = insert
        self.read = read
        self.received = received
        self.sent = sent
        self.source = source
    }

    private enum CodingKeys: String, CodingKey {
        case countdownServerAdjustment
        case insert
        case read
        case received
        case sent
        case source
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        countdownServerAdjustment = try container.decodeIfPresent(.countdownServerAdjustment)
        insert = try container.decodeIfPresent(.insert)
        read = try container.decodeIfPresent(.read)
        received = try container.decodeIfPresent(.received)
        sent = try container.decodeIfPresent(.sent)
        source = try container.decodeIfPresent(.source)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(countdownServerAdjustment, forKey: .countdownServerAdjustment)
        try container.encode(insert, forKey: .insert)
        try container.encode(read, forKey: .read)
        try container.encode(received, forKey: .received)
        try container.encode(sent, forKey: .sent)
        try container.encode(source, forKey: .source)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PredictionTiming else { return false }
      guard self.countdownServerAdjustment == object.countdownServerAdjustment else { return false }
      guard self.insert == object.insert else { return false }
      guard self.read == object.read else { return false }
      guard self.received == object.received else { return false }
      guard self.sent == object.sent else { return false }
      guard self.source == object.source else { return false }
      return true
    }

    public static func == (lhs: PredictionTiming, rhs: PredictionTiming) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
