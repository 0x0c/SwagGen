//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension PetstoreTest.Store {

    /** Place an order for a pet */
    public enum PlaceOrder {

        public static let service = APIService<Response>(id: "placeOrder", tag: "store", method: "POST", path: "/store/order", hasBody: true)

        /** Order Status */
        public enum Status: String, Codable, Equatable, CaseIterable {
            case placed = "placed"
            case approved = "approved"
            case delivered = "delivered"
        }

        public final class Request: APIRequest<Response> {

            public class Body: APIModel {

                /** Order Status */
                public enum Status: String, Codable, Equatable, CaseIterable {
                    case placed = "placed"
                    case approved = "approved"
                    case delivered = "delivered"
                }

                public var complete: Bool?

                public var id: Int?

                public var petId: Int?

                public var quantity: Int?

                public var shipDate: DateTime?

                /** Order Status */
                public var status: Status?

                public init(complete: Bool? = nil, id: Int? = nil, petId: Int? = nil, quantity: Int? = nil, shipDate: DateTime? = nil, status: Status? = nil) {
                    self.complete = complete
                    self.id = id
                    self.petId = petId
                    self.quantity = quantity
                    self.shipDate = shipDate
                    self.status = status
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    complete = try container.decodeIfPresent("complete")
                    id = try container.decodeIfPresent("id")
                    petId = try container.decodeIfPresent("petId")
                    quantity = try container.decodeIfPresent("quantity")
                    shipDate = try container.decodeIfPresent("shipDate")
                    status = try container.decodeIfPresent("status")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(complete, forKey: "complete")
                    try container.encodeIfPresent(id, forKey: "id")
                    try container.encodeIfPresent(petId, forKey: "petId")
                    try container.encodeIfPresent(quantity, forKey: "quantity")
                    try container.encodeIfPresent(shipDate, forKey: "shipDate")
                    try container.encodeIfPresent(status, forKey: "status")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.complete == object.complete else { return false }
                  guard self.id == object.id else { return false }
                  guard self.petId == object.petId else { return false }
                  guard self.quantity == object.quantity else { return false }
                  guard self.shipDate == object.shipDate else { return false }
                  guard self.status == object.status else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public var body: Body

            public init(body: Body, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: PlaceOrder.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            public class Status200: APIModel {

                /** Order Status */
                public enum Status: String, Codable, Equatable, CaseIterable {
                    case placed = "placed"
                    case approved = "approved"
                    case delivered = "delivered"
                }

                public var complete: Bool?

                public var id: Int?

                public var petId: Int?

                public var quantity: Int?

                public var shipDate: DateTime?

                /** Order Status */
                public var status: Status?

                public init(complete: Bool? = nil, id: Int? = nil, petId: Int? = nil, quantity: Int? = nil, shipDate: DateTime? = nil, status: Status? = nil) {
                    self.complete = complete
                    self.id = id
                    self.petId = petId
                    self.quantity = quantity
                    self.shipDate = shipDate
                    self.status = status
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    complete = try container.decodeIfPresent("complete")
                    id = try container.decodeIfPresent("id")
                    petId = try container.decodeIfPresent("petId")
                    quantity = try container.decodeIfPresent("quantity")
                    shipDate = try container.decodeIfPresent("shipDate")
                    status = try container.decodeIfPresent("status")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(complete, forKey: "complete")
                    try container.encodeIfPresent(id, forKey: "id")
                    try container.encodeIfPresent(petId, forKey: "petId")
                    try container.encodeIfPresent(quantity, forKey: "quantity")
                    try container.encodeIfPresent(shipDate, forKey: "shipDate")
                    try container.encodeIfPresent(status, forKey: "status")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.complete == object.complete else { return false }
                  guard self.id == object.id else { return false }
                  guard self.petId == object.petId else { return false }
                  guard self.quantity == object.quantity else { return false }
                  guard self.shipDate == object.shipDate else { return false }
                  guard self.status == object.status else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** successful operation */
            case status200(Status200)

            /** Invalid Order */
            case status400

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 400: self = .status400
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
