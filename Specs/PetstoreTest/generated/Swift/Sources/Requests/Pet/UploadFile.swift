//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension PetstoreTest.Pet {

    /** uploads an image */
    public enum UploadFile {

        public static let service = APIService<Response>(id: "uploadFile", tag: "pet", method: "POST", path: "/pet/{petId}/uploadImage", hasBody: true, isUpload: true, securityRequirements: [SecurityRequirement(type: "petstore_auth", scopes: ["write:pets", "read:pets"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** ID of pet to update */
                public var petId: Int

                /** Additional data to pass to server */
                public var additionalMetadata: String?

                /** file to upload */
                public var file: File?

                public init(petId: Int, additionalMetadata: String? = nil, file: File? = nil) {
                    self.petId = petId
                    self.additionalMetadata = additionalMetadata
                    self.file = file
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: UploadFile.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(petId: Int, additionalMetadata: String? = nil, file: File? = nil) {
                let options = Options(petId: petId, additionalMetadata: additionalMetadata, file: file)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "petId" + "}", with: "\(self.options.petId)")
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let additionalMetadata = options.additionalMetadata {
                  params["additionalMetadata"] = additionalMetadata
                }
                if let file = options.file?.encode() {
                  params["file"] = file
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            public class Status200: APIModel {

                public var code: Int?

                public var message: String?

                public var type: String?

                public init(code: Int? = nil, message: String? = nil, type: String? = nil) {
                    self.code = code
                    self.message = message
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    code = try container.decodeIfPresent("code")
                    message = try container.decodeIfPresent("message")
                    type = try container.decodeIfPresent("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(code, forKey: "code")
                    try container.encodeIfPresent(message, forKey: "message")
                    try container.encodeIfPresent(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.code == object.code else { return false }
                  guard self.message == object.message else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** successful operation */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
