//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension PetstoreTest.Pet {

    /** Update an existing pet */
    public enum UpdatePet {

        public static let service = APIService<Response>(id: "updatePet", tag: "pet", method: "PUT", path: "/pet", hasBody: true, securityRequirements: [SecurityRequirement(type: "petstore_auth", scopes: ["write:pets", "read:pets"])])

        /** pet status in the store */
        public enum Status: String, Codable, Equatable, CaseIterable {
            case available = "available"
            case pending = "pending"
            case sold = "sold"
        }

        public final class Request: APIRequest<Response> {

            public class Pet: APIModel {

                /** pet status in the store */
                public enum Status: String, Codable, Equatable, CaseIterable {
                    case available = "available"
                    case pending = "pending"
                    case sold = "sold"
                }

                public var name: String

                public var photoUrls: [String]

                public var category: Category?

                public var id: Int?

                /** pet status in the store */
                public var status: Status?

                public var tags: [Tag]?

                public init(name: String, photoUrls: [String], category: Category? = nil, id: Int? = nil, status: Status? = nil, tags: [Tag]? = nil) {
                    self.name = name
                    self.photoUrls = photoUrls
                    self.category = category
                    self.id = id
                    self.status = status
                    self.tags = tags
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    name = try container.decode("name")
                    photoUrls = try container.decodeArray("photoUrls")
                    category = try container.decodeIfPresent("category")
                    id = try container.decodeIfPresent("id")
                    status = try container.decodeIfPresent("status")
                    tags = try container.decodeArrayIfPresent("tags")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(name, forKey: "name")
                    try container.encode(photoUrls, forKey: "photoUrls")
                    try container.encodeIfPresent(category, forKey: "category")
                    try container.encodeIfPresent(id, forKey: "id")
                    try container.encodeIfPresent(status, forKey: "status")
                    try container.encodeIfPresent(tags, forKey: "tags")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Pet else { return false }
                  guard self.name == object.name else { return false }
                  guard self.photoUrls == object.photoUrls else { return false }
                  guard self.category == object.category else { return false }
                  guard self.id == object.id else { return false }
                  guard self.status == object.status else { return false }
                  guard self.tags == object.tags else { return false }
                  return true
                }

                public static func == (lhs: Pet, rhs: Pet) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public var body: Pet

            public init(body: Pet, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: UpdatePet.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Invalid ID supplied */
            case status400

            /** Pet not found */
            case status404

            /** Validation exception */
            case status405

            public var success: Void? {
                switch self {
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status400: return 400
                case .status404: return 404
                case .status405: return 405
                }
            }

            public var successful: Bool {
                switch self {
                case .status400: return false
                case .status404: return false
                case .status405: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 400: self = .status400
                case 404: self = .status404
                case 405: self = .status405
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
