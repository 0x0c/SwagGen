//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class FormatTest: Codable {

    public var number: Double

    public var byte: String

    public var date: Date

    public var password: String

    public var binary: String?

    public var dateTime: Date?

    public var double: Double?

    public var float: Float?

    public var int32: Int?

    public var int64: Int?

    public var integer: Int?

    public var string: String?

    public var uuid: String?

    public init(number: Double, byte: String, date: Date, password: String, binary: String? = nil, dateTime: Date? = nil, double: Double? = nil, float: Float? = nil, int32: Int? = nil, int64: Int? = nil, integer: Int? = nil, string: String? = nil, uuid: String? = nil) {
        self.number = number
        self.byte = byte
        self.date = date
        self.password = password
        self.binary = binary
        self.dateTime = dateTime
        self.double = double
        self.float = float
        self.int32 = int32
        self.int64 = int64
        self.integer = integer
        self.string = string
        self.uuid = uuid
    }

    private enum CodingKeys: String, CodingKey {
        case number
        case byte
        case date
        case password
        case binary
        case dateTime
        case double
        case float
        case int32
        case int64
        case integer
        case string
        case uuid
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        number = try container.decode(.number)
        byte = try container.decode(.byte)
        date = try container.decode(.date)
        password = try container.decode(.password)
        binary = try container.decodeIfPresent(.binary)
        dateTime = try container.decodeIfPresent(.dateTime)
        double = try container.decodeIfPresent(.double)
        float = try container.decodeIfPresent(.float)
        int32 = try container.decodeIfPresent(.int32)
        int64 = try container.decodeIfPresent(.int64)
        integer = try container.decodeIfPresent(.integer)
        string = try container.decodeIfPresent(.string)
        uuid = try container.decodeIfPresent(.uuid)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(number, forKey: .number)
        try container.encode(byte, forKey: .byte)
        try container.encode(date, forKey: .date)
        try container.encode(password, forKey: .password)
        try container.encode(binary, forKey: .binary)
        try container.encode(dateTime, forKey: .dateTime)
        try container.encode(double, forKey: .double)
        try container.encode(float, forKey: .float)
        try container.encode(int32, forKey: .int32)
        try container.encode(int64, forKey: .int64)
        try container.encode(integer, forKey: .integer)
        try container.encode(string, forKey: .string)
        try container.encode(uuid, forKey: .uuid)
    }
}
