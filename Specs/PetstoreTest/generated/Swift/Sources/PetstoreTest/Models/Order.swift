//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Order: Codable {

    /** Order Status */
    public enum Status: String, Codable {
        case placed = "placed"
        case approved = "approved"
        case delivered = "delivered"

        public static let cases: [Status] = [
          .placed,
          .approved,
          .delivered,
        ]
    }

    public var complete: Bool?

    public var id: Int?

    public var petId: Int?

    public var quantity: Int?

    public var shipDate: Date?

    /** Order Status */
    public var status: Status?

    public init(complete: Bool? = nil, id: Int? = nil, petId: Int? = nil, quantity: Int? = nil, shipDate: Date? = nil, status: Status? = nil) {
        self.complete = complete
        self.id = id
        self.petId = petId
        self.quantity = quantity
        self.shipDate = shipDate
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case complete
        case id
        case petId
        case quantity
        case shipDate
        case status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        complete = try container.decodeIfPresent(.complete)
        id = try container.decodeIfPresent(.id)
        petId = try container.decodeIfPresent(.petId)
        quantity = try container.decodeIfPresent(.quantity)
        shipDate = try container.decodeIfPresent(.shipDate)
        status = try container.decodeIfPresent(.status)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(complete, forKey: .complete)
        try container.encode(id, forKey: .id)
        try container.encode(petId, forKey: .petId)
        try container.encode(quantity, forKey: .quantity)
        try container.encode(shipDate, forKey: .shipDate)
        try container.encode(status, forKey: .status)
    }
}
