//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EnumTest: Codable {

    public enum EnumInteger: Int, Codable {
        case _1 = 1
        case negative1 = -1

        public static let cases: [EnumInteger] = [
          ._1,
          .negative1,
        ]
    }

    public enum EnumNumber: Double, Codable {
        case _11 = 1.1
        case negative12 = -1.2

        public static let cases: [EnumNumber] = [
          ._11,
          .negative12,
        ]
    }

    public enum EnumString: String, Codable {
        case upper = "UPPER"
        case lower = "lower"
        case lessThannullgreaterThan = "<null>"

        public static let cases: [EnumString] = [
          .upper,
          .lower,
          .lessThannullgreaterThan,
        ]
    }

    public var enumInteger: EnumInteger?

    public var enumNumber: EnumNumber?

    public var enumString: EnumString?

    public var outerEnum: OuterEnum?

    public init(enumInteger: EnumInteger? = nil, enumNumber: EnumNumber? = nil, enumString: EnumString? = nil, outerEnum: OuterEnum? = nil) {
        self.enumInteger = enumInteger
        self.enumNumber = enumNumber
        self.enumString = enumString
        self.outerEnum = outerEnum
    }

    private enum CodingKeys: String, CodingKey {
        case enumInteger = "enum_integer"
        case enumNumber = "enum_number"
        case enumString = "enum_string"
        case outerEnum
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        enumInteger = try container.decodeIfPresent(.enumInteger)
        enumNumber = try container.decodeIfPresent(.enumNumber)
        enumString = try container.decodeIfPresent(.enumString)
        outerEnum = try container.decodeIfPresent(.outerEnum)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(enumInteger, forKey: .enumInteger)
        try container.encode(enumNumber, forKey: .enumNumber)
        try container.encode(enumString, forKey: .enumString)
        try container.encode(outerEnum, forKey: .outerEnum)
    }
}
