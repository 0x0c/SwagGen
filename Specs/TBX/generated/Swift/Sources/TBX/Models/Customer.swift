//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Customer: Codable {

    public var subscriberID: String

    public var banReason: String?

    public var banned: Bool?

    public var country: ObjectID?

    public var created: Date?

    public var hasNotDeviceLimit: Bool?

    public var id: ObjectID?

    public var identityProvider: ObjectID?

    public var lastLogin: Date?

    public var updated: Date?

    public init(subscriberID: String, banReason: String? = nil, banned: Bool? = nil, country: ObjectID? = nil, created: Date? = nil, hasNotDeviceLimit: Bool? = nil, id: ObjectID? = nil, identityProvider: ObjectID? = nil, lastLogin: Date? = nil, updated: Date? = nil) {
        self.subscriberID = subscriberID
        self.banReason = banReason
        self.banned = banned
        self.country = country
        self.created = created
        self.hasNotDeviceLimit = hasNotDeviceLimit
        self.id = id
        self.identityProvider = identityProvider
        self.lastLogin = lastLogin
        self.updated = updated
    }

    private enum CodingKeys: String, CodingKey {
        case subscriberID
        case banReason
        case banned
        case country
        case created
        case hasNotDeviceLimit
        case id
        case identityProvider
        case lastLogin
        case updated
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        subscriberID = try container.decode(.subscriberID)
        banReason = try container.decodeIfPresent(.banReason)
        banned = try container.decodeIfPresent(.banned)
        country = try container.decodeIfPresent(.country)
        created = try container.decodeIfPresent(.created)
        hasNotDeviceLimit = try container.decodeIfPresent(.hasNotDeviceLimit)
        id = try container.decodeIfPresent(.id)
        identityProvider = try container.decodeIfPresent(.identityProvider)
        lastLogin = try container.decodeIfPresent(.lastLogin)
        updated = try container.decodeIfPresent(.updated)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(subscriberID, forKey: .subscriberID)
        try container.encode(banReason, forKey: .banReason)
        try container.encode(banned, forKey: .banned)
        try container.encode(country, forKey: .country)
        try container.encode(created, forKey: .created)
        try container.encode(hasNotDeviceLimit, forKey: .hasNotDeviceLimit)
        try container.encode(id, forKey: .id)
        try container.encode(identityProvider, forKey: .identityProvider)
        try container.encode(lastLogin, forKey: .lastLogin)
        try container.encode(updated, forKey: .updated)
    }
}
