//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class DeviceType: Codable {

    public var shortName: String

    public var contentProvider: ObjectID?

    public var defaultExpireDays: Double?

    public var deviceType: String?

    public var id: ObjectID?

    public var needActivation: Bool?

    public init(shortName: String, contentProvider: ObjectID? = nil, defaultExpireDays: Double? = nil, deviceType: String? = nil, id: ObjectID? = nil, needActivation: Bool? = nil) {
        self.shortName = shortName
        self.contentProvider = contentProvider
        self.defaultExpireDays = defaultExpireDays
        self.deviceType = deviceType
        self.id = id
        self.needActivation = needActivation
    }

    private enum CodingKeys: String, CodingKey {
        case shortName
        case contentProvider
        case defaultExpireDays
        case deviceType
        case id
        case needActivation
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        shortName = try container.decode(.shortName)
        contentProvider = try container.decodeIfPresent(.contentProvider)
        defaultExpireDays = try container.decodeIfPresent(.defaultExpireDays)
        deviceType = try container.decodeIfPresent(.deviceType)
        id = try container.decodeIfPresent(.id)
        needActivation = try container.decodeIfPresent(.needActivation)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(shortName, forKey: .shortName)
        try container.encode(contentProvider, forKey: .contentProvider)
        try container.encode(defaultExpireDays, forKey: .defaultExpireDays)
        try container.encode(deviceType, forKey: .deviceType)
        try container.encode(id, forKey: .id)
        try container.encode(needActivation, forKey: .needActivation)
    }
}
