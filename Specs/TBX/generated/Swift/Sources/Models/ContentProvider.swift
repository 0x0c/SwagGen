//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ContentProvider: Codable {

    public var description: String

    public var shortName: String

    public var active: Bool

    public var apiKey: String

    public var devicesLimit: Double

    public var canLogoutDevice: Bool

    public var canCreateTryAndBuy: Bool?

    public var hasSocialID: Bool?

    public var id: ObjectID?

    public var overrideRules: [OverrideRuleObject]?

    public var permittedURN: [String]?

    public var urlMaintenance: String?

    public var whitelistDomains: [String]?

    public init(description: String, shortName: String, active: Bool, apiKey: String, devicesLimit: Double, canLogoutDevice: Bool, canCreateTryAndBuy: Bool? = nil, hasSocialID: Bool? = nil, id: ObjectID? = nil, overrideRules: [OverrideRuleObject]? = nil, permittedURN: [String]? = nil, urlMaintenance: String? = nil, whitelistDomains: [String]? = nil) {
        self.description = description
        self.shortName = shortName
        self.active = active
        self.apiKey = apiKey
        self.devicesLimit = devicesLimit
        self.canLogoutDevice = canLogoutDevice
        self.canCreateTryAndBuy = canCreateTryAndBuy
        self.hasSocialID = hasSocialID
        self.id = id
        self.overrideRules = overrideRules
        self.permittedURN = permittedURN
        self.urlMaintenance = urlMaintenance
        self.whitelistDomains = whitelistDomains
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case shortName
        case active
        case apiKey
        case devicesLimit
        case canLogoutDevice
        case canCreateTryAndBuy
        case hasSocialID
        case id
        case overrideRules
        case permittedURN
        case urlMaintenance
        case whitelistDomains
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decode(.description)
        shortName = try container.decode(.shortName)
        active = try container.decode(.active)
        apiKey = try container.decode(.apiKey)
        devicesLimit = try container.decode(.devicesLimit)
        canLogoutDevice = try container.decode(.canLogoutDevice)
        canCreateTryAndBuy = try container.decodeIfPresent(.canCreateTryAndBuy)
        hasSocialID = try container.decodeIfPresent(.hasSocialID)
        id = try container.decodeIfPresent(.id)
        overrideRules = try container.decodeIfPresent(.overrideRules)
        permittedURN = try container.decodeIfPresent(.permittedURN)
        urlMaintenance = try container.decodeIfPresent(.urlMaintenance)
        whitelistDomains = try container.decodeIfPresent(.whitelistDomains)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(description, forKey: .description)
        try container.encode(shortName, forKey: .shortName)
        try container.encode(active, forKey: .active)
        try container.encode(apiKey, forKey: .apiKey)
        try container.encode(devicesLimit, forKey: .devicesLimit)
        try container.encode(canLogoutDevice, forKey: .canLogoutDevice)
        try container.encode(canCreateTryAndBuy, forKey: .canCreateTryAndBuy)
        try container.encode(hasSocialID, forKey: .hasSocialID)
        try container.encode(id, forKey: .id)
        try container.encode(overrideRules, forKey: .overrideRules)
        try container.encode(permittedURN, forKey: .permittedURN)
        try container.encode(urlMaintenance, forKey: .urlMaintenance)
        try container.encode(whitelistDomains, forKey: .whitelistDomains)
    }
}
