//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Subscription: Codable {

    /** The status of a subscription. */
    public enum Status: String, Codable {
        case active = "Active"
        case cancelled = "Cancelled"
        case lapsed = "Lapsed"
        case expired = "Expired"
        case none = "None"

        public static let cases: [Status] = [
          .active,
          .cancelled,
          .lapsed,
          .expired,
          .none,
        ]
    }

    /** The unique subscription code. */
    public var code: String

    /** The start date of a subscription. */
    public var startDate: Date

    /** True if a subscription is in its trial period, false if not. */
    public var isTrialPeriod: Bool

    /** The plan a subscription belongs to. */
    public var planId: String

    /** The status of a subscription. */
    public var status: Status

    /** The end date of a subscription.

Some subscriptions may not have an end date, in which case this
property will not exist.
 */
    public var endDate: Date?

    public init(code: String, startDate: Date, isTrialPeriod: Bool, planId: String, status: Status, endDate: Date? = nil) {
        self.code = code
        self.startDate = startDate
        self.isTrialPeriod = isTrialPeriod
        self.planId = planId
        self.status = status
        self.endDate = endDate
    }

    private enum CodingKeys: String, CodingKey {
        case code
        case startDate
        case isTrialPeriod
        case planId
        case status
        case endDate
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        code = try container.decode(.code)
        startDate = try container.decode(.startDate)
        isTrialPeriod = try container.decode(.isTrialPeriod)
        planId = try container.decode(.planId)
        status = try container.decode(.status)
        endDate = try container.decodeIfPresent(.endDate)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(code, forKey: .code)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(isTrialPeriod, forKey: .isTrialPeriod)
        try container.encode(planId, forKey: .planId)
        try container.encode(status, forKey: .status)
        try container.encode(endDate, forKey: .endDate)
    }
}
