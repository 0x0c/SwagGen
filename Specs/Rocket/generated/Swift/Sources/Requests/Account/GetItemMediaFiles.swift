//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension Rocket.Account {

    /** Get the video files associated with an item given maximum resolution, device type
and one or more delivery types.
This endpoint accepts an Account Catalog token, however if when requesting
playback files you receive an *403 status code with error code 1* then the file
you're requesting is classification restricted. This means you should switch
to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
Playback token. If not already obtained, this token can be requested via the
`/authorization` endpoint with an account level pin.
For convenience you may also access free / public files through this endpoint
instead of the /items/{id}/videos endpoint, when authenticated.
Returns an array of video file objects which each include a url to a video.
The first entry in the array contains what is predicted to be the best match.
The remainder of the entries, if any, may contain resolutions below what was
requests. For example if you request HD-720 the response may also contain
SD entries.
If you specify multiple delivery types, then the response array will insert
types in the order you specify them in the query. For example `stream,progressive`
would return an array with 0 or more stream files followed by 0 or more progressive files.
If no files are found a 404 is returned.
 */
    public enum GetItemMediaFiles {

        public static let service = APIService<Response>(id: "getItemMediaFiles", tag: "account", method: "GET", path: "/account/items/{id}/videos", hasBody: false, securityRequirements: [SecurityRequirement(type: "accountAuth", scopes: ["Catalog"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The identifier of the item whose video files to load. */
                public var id: String

                /** The video delivery type you require. */
                public var delivery: [MediaFileDelivery]

                /** The maximum resolution the device to playback the media can present. */
                public var resolution: MediaFileResolution

                /** The type of device the content is targeting. */
                public var device: String?

                /** The active subscription code. */
                public var sub: String?

                /** The list of segments to filter the response by. */
                public var segments: [String]?

                /** The set of opt in feature flags which cause breaking changes to responses.
While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses
may need to evolve over this time.
These feature flags allow clients to select which response formats they expect and avoid breaking
clients as these formats evolve under the current major version.
### Flags
- `all` - Enable all flags. Useful for testing. _Don't use in production_.
- `idp` - Dynamic item detail pages with schedulable rows.
- `ldp` - Dynamic list detail pages with schedulable rows.
See the `feature-flags.md` for available flag details.
 */
                public var ff: [FeatureFlags]?

                public init(id: String, delivery: [MediaFileDelivery], resolution: MediaFileResolution, device: String? = nil, sub: String? = nil, segments: [String]? = nil, ff: [FeatureFlags]? = nil) {
                    self.id = id
                    self.delivery = delivery
                    self.resolution = resolution
                    self.device = device
                    self.sub = sub
                    self.segments = segments
                    self.ff = ff
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetItemMediaFiles.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, delivery: [MediaFileDelivery], resolution: MediaFileResolution, device: String? = nil, sub: String? = nil, segments: [String]? = nil, ff: [FeatureFlags]? = nil) {
                let options = Options(id: id, delivery: delivery, resolution: resolution, device: device, sub: sub, segments: segments, ff: ff)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["delivery"] = options.delivery.encode().map({ String(describing: $0) }).joined(separator: ",")
                params["resolution"] = options.resolution.encode()
                if let device = options.device {
                  params["device"] = device
                }
                if let sub = options.sub {
                  params["sub"] = sub
                }
                if let segments = options.segments?.joined(separator: ",") {
                  params["segments"] = segments
                }
                if let ff = options.ff?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["ff"] = ff
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get the video files associated with an item given maximum resolution, device type
            and one or more delivery types.
            This endpoint accepts an Account Catalog token, however if when requesting
            playback files you receive an *403 status code with error code 1* then the file
            you're requesting is classification restricted. This means you should switch
            to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
            Playback token. If not already obtained, this token can be requested via the
            `/authorization` endpoint with an account level pin.
            For convenience you may also access free / public files through this endpoint
            instead of the /items/{id}/videos endpoint, when authenticated.
            Returns an array of video file objects which each include a url to a video.
            The first entry in the array contains what is predicted to be the best match.
            The remainder of the entries, if any, may contain resolutions below what was
            requests. For example if you request HD-720 the response may also contain
            SD entries.
            If you specify multiple delivery types, then the response array will insert
            types in the order you specify them in the query. For example `stream,progressive`
            would return an array with 0 or more stream files followed by 0 or more progressive files.
            If no files are found a 404 is returned.
             */
            public class Status400: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status400 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status400, rhs: Status400) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the video files associated with an item given maximum resolution, device type
            and one or more delivery types.
            This endpoint accepts an Account Catalog token, however if when requesting
            playback files you receive an *403 status code with error code 1* then the file
            you're requesting is classification restricted. This means you should switch
            to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
            Playback token. If not already obtained, this token can be requested via the
            `/authorization` endpoint with an account level pin.
            For convenience you may also access free / public files through this endpoint
            instead of the /items/{id}/videos endpoint, when authenticated.
            Returns an array of video file objects which each include a url to a video.
            The first entry in the array contains what is predicted to be the best match.
            The remainder of the entries, if any, may contain resolutions below what was
            requests. For example if you request HD-720 the response may also contain
            SD entries.
            If you specify multiple delivery types, then the response array will insert
            types in the order you specify them in the query. For example `stream,progressive`
            would return an array with 0 or more stream files followed by 0 or more progressive files.
            If no files are found a 404 is returned.
             */
            public class Status401: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status401 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status401, rhs: Status401) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the video files associated with an item given maximum resolution, device type
            and one or more delivery types.
            This endpoint accepts an Account Catalog token, however if when requesting
            playback files you receive an *403 status code with error code 1* then the file
            you're requesting is classification restricted. This means you should switch
            to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
            Playback token. If not already obtained, this token can be requested via the
            `/authorization` endpoint with an account level pin.
            For convenience you may also access free / public files through this endpoint
            instead of the /items/{id}/videos endpoint, when authenticated.
            Returns an array of video file objects which each include a url to a video.
            The first entry in the array contains what is predicted to be the best match.
            The remainder of the entries, if any, may contain resolutions below what was
            requests. For example if you request HD-720 the response may also contain
            SD entries.
            If you specify multiple delivery types, then the response array will insert
            types in the order you specify them in the query. For example `stream,progressive`
            would return an array with 0 or more stream files followed by 0 or more progressive files.
            If no files are found a 404 is returned.
             */
            public class Status403: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status403 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status403, rhs: Status403) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the video files associated with an item given maximum resolution, device type
            and one or more delivery types.
            This endpoint accepts an Account Catalog token, however if when requesting
            playback files you receive an *403 status code with error code 1* then the file
            you're requesting is classification restricted. This means you should switch
            to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
            Playback token. If not already obtained, this token can be requested via the
            `/authorization` endpoint with an account level pin.
            For convenience you may also access free / public files through this endpoint
            instead of the /items/{id}/videos endpoint, when authenticated.
            Returns an array of video file objects which each include a url to a video.
            The first entry in the array contains what is predicted to be the best match.
            The remainder of the entries, if any, may contain resolutions below what was
            requests. For example if you request HD-720 the response may also contain
            SD entries.
            If you specify multiple delivery types, then the response array will insert
            types in the order you specify them in the query. For example `stream,progressive`
            would return an array with 0 or more stream files followed by 0 or more progressive files.
            If no files are found a 404 is returned.
             */
            public class Status404: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status404 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status404, rhs: Status404) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the video files associated with an item given maximum resolution, device type
            and one or more delivery types.
            This endpoint accepts an Account Catalog token, however if when requesting
            playback files you receive an *403 status code with error code 1* then the file
            you're requesting is classification restricted. This means you should switch
            to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
            Playback token. If not already obtained, this token can be requested via the
            `/authorization` endpoint with an account level pin.
            For convenience you may also access free / public files through this endpoint
            instead of the /items/{id}/videos endpoint, when authenticated.
            Returns an array of video file objects which each include a url to a video.
            The first entry in the array contains what is predicted to be the best match.
            The remainder of the entries, if any, may contain resolutions below what was
            requests. For example if you request HD-720 the response may also contain
            SD entries.
            If you specify multiple delivery types, then the response array will insert
            types in the order you specify them in the query. For example `stream,progressive`
            would return an array with 0 or more stream files followed by 0 or more progressive files.
            If no files are found a 404 is returned.
             */
            public class Status500: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status500 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status500, rhs: Status500) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the video files associated with an item given maximum resolution, device type
            and one or more delivery types.
            This endpoint accepts an Account Catalog token, however if when requesting
            playback files you receive an *403 status code with error code 1* then the file
            you're requesting is classification restricted. This means you should switch
            to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account
            Playback token. If not already obtained, this token can be requested via the
            `/authorization` endpoint with an account level pin.
            For convenience you may also access free / public files through this endpoint
            instead of the /items/{id}/videos endpoint, when authenticated.
            Returns an array of video file objects which each include a url to a video.
            The first entry in the array contains what is predicted to be the best match.
            The remainder of the entries, if any, may contain resolutions below what was
            requests. For example if you request HD-720 the response may also contain
            SD entries.
            If you specify multiple delivery types, then the response array will insert
            types in the order you specify them in the query. For example `stream,progressive`
            would return an array with 0 or more stream files followed by 0 or more progressive files.
            If no files are found a 404 is returned.
             */
            public class DefaultResponse: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = [MediaFile]

            /** The list of video files available.
The first entry containing what is predicted to be the best match.
 */
            case status200([MediaFile])

            /** Bad request. */
            case status400(Status400)

            /** Invalid access token. */
            case status401(Status401)

            /** Forbidden. */
            case status403(Status403)

            /** Not found. */
            case status404(Status404)

            /** Internal server error. */
            case status500(Status500)

            /** Service error. */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: [MediaFile]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                case .status500(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                case .status500: return 500
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status401: return false
                case .status403: return false
                case .status404: return false
                case .status500: return false
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([MediaFile].self, from: data))
                case 400: self = try .status400(decoder.decode(Status400.self, from: data))
                case 401: self = try .status401(decoder.decode(Status401.self, from: data))
                case 403: self = try .status403(decoder.decode(Status403.self, from: data))
                case 404: self = try .status404(decoder.decode(Status404.self, from: data))
                case 500: self = try .status500(decoder.decode(Status500.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
