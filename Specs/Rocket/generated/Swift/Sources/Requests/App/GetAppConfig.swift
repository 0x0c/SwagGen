//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension Rocket.App {

    /** Get the global configuration for an application. Should be called during app statup.
This includes things like device and playback rules, classifications,
sitemap and subscriptions.
You have the option to select specific configuration objects using the 'include'
parameter, or if unspecified, getting all configuration.
 */
    public enum GetAppConfig {

        public static let service = APIService<Response>(id: "getAppConfig", tag: "app", method: "GET", path: "/config", hasBody: false)

        /** A comma delimited list of config objects to return.
        If none specified then all configuration is returned.
         */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case classification = "classification"
            case playback = "playback"
            case sitemap = "sitemap"
            case navigation = "navigation"
            case subscription = "subscription"
            case general = "general"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** A comma delimited list of config objects to return.
If none specified then all configuration is returned.
 */
                public var include: [Include]?

                /** The type of device the content is targeting. */
                public var device: String?

                /** The active subscription code. */
                public var sub: String?

                /** The list of segments to filter the response by. */
                public var segments: [String]?

                /** The set of opt in feature flags which cause breaking changes to responses.
While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses
may need to evolve over this time.
These feature flags allow clients to select which response formats they expect and avoid breaking
clients as these formats evolve under the current major version.
### Flags
- `all` - Enable all flags. Useful for testing. _Don't use in production_.
- `idp` - Dynamic item detail pages with schedulable rows.
- `ldp` - Dynamic list detail pages with schedulable rows.
See the `feature-flags.md` for available flag details.
 */
                public var ff: [FeatureFlags]?

                public init(include: [Include]? = nil, device: String? = nil, sub: String? = nil, segments: [String]? = nil, ff: [FeatureFlags]? = nil) {
                    self.include = include
                    self.device = device
                    self.sub = sub
                    self.segments = segments
                    self.ff = ff
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetAppConfig.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(include: [Include]? = nil, device: String? = nil, sub: String? = nil, segments: [String]? = nil, ff: [FeatureFlags]? = nil) {
                let options = Options(include: include, device: device, sub: sub, segments: segments, ff: ff)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                if let device = options.device {
                  params["device"] = device
                }
                if let sub = options.sub {
                  params["sub"] = sub
                }
                if let segments = options.segments?.joined(separator: ",") {
                  params["segments"] = segments
                }
                if let ff = options.ff?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["ff"] = ff
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Get the global configuration for an application. Should be called during app statup.
            This includes things like device and playback rules, classifications,
            sitemap and subscriptions.
            You have the option to select specific configuration objects using the 'include'
            parameter, or if unspecified, getting all configuration.
             */
            public class Status200: APIModel {

                /** The map of classification ratings. */
                public var classification: [String: Classification]?

                public var general: AppConfigGeneral?

                public var navigation: Navigation?

                public var playback: AppConfigPlayback?

                public var sitemap: [PageSummary]?

                public var subscription: AppConfigSubscription?

                public init(classification: [String: Classification]? = nil, general: AppConfigGeneral? = nil, navigation: Navigation? = nil, playback: AppConfigPlayback? = nil, sitemap: [PageSummary]? = nil, subscription: AppConfigSubscription? = nil) {
                    self.classification = classification
                    self.general = general
                    self.navigation = navigation
                    self.playback = playback
                    self.sitemap = sitemap
                    self.subscription = subscription
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    classification = try container.decodeIfPresent("classification")
                    general = try container.decodeIfPresent("general")
                    navigation = try container.decodeIfPresent("navigation")
                    playback = try container.decodeIfPresent("playback")
                    sitemap = try container.decodeArrayIfPresent("sitemap")
                    subscription = try container.decodeIfPresent("subscription")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(classification, forKey: "classification")
                    try container.encodeIfPresent(general, forKey: "general")
                    try container.encodeIfPresent(navigation, forKey: "navigation")
                    try container.encodeIfPresent(playback, forKey: "playback")
                    try container.encodeIfPresent(sitemap, forKey: "sitemap")
                    try container.encodeIfPresent(subscription, forKey: "subscription")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.classification == object.classification else { return false }
                  guard self.general == object.general else { return false }
                  guard self.navigation == object.navigation else { return false }
                  guard self.playback == object.playback else { return false }
                  guard self.sitemap == object.sitemap else { return false }
                  guard self.subscription == object.subscription else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the global configuration for an application. Should be called during app statup.
            This includes things like device and playback rules, classifications,
            sitemap and subscriptions.
            You have the option to select specific configuration objects using the 'include'
            parameter, or if unspecified, getting all configuration.
             */
            public class Status400: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status400 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status400, rhs: Status400) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the global configuration for an application. Should be called during app statup.
            This includes things like device and playback rules, classifications,
            sitemap and subscriptions.
            You have the option to select specific configuration objects using the 'include'
            parameter, or if unspecified, getting all configuration.
             */
            public class Status404: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status404 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status404, rhs: Status404) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the global configuration for an application. Should be called during app statup.
            This includes things like device and playback rules, classifications,
            sitemap and subscriptions.
            You have the option to select specific configuration objects using the 'include'
            parameter, or if unspecified, getting all configuration.
             */
            public class Status500: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status500 else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: Status500, rhs: Status500) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Get the global configuration for an application. Should be called during app statup.
            This includes things like device and playback rules, classifications,
            sitemap and subscriptions.
            You have the option to select specific configuration objects using the 'include'
            parameter, or if unspecified, getting all configuration.
             */
            public class DefaultResponse: APIModel {

                /** A description of the error. */
                public var message: String

                /** An optional code classifying the error. Should be taken in the context of the http status code. */
                public var code: Int?

                public init(message: String, code: Int? = nil) {
                    self.message = message
                    self.code = code
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    message = try container.decode("message")
                    code = try container.decodeIfPresent("code")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(message, forKey: "message")
                    try container.encodeIfPresent(code, forKey: "code")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.message == object.message else { return false }
                  guard self.code == object.code else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** The list of available pages */
            case status200(Status200)

            /** Bad request. */
            case status400(Status400)

            /** Not found. */
            case status404(Status404)

            /** Internal server error. */
            case status500(Status500)

            /** Service error. */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status404(let response): return response
                case .status500(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status404: return 404
                case .status500: return 500
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status404: return false
                case .status500: return false
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                case 400: self = try .status400(decoder.decode(Status400.self, from: data))
                case 404: self = try .status404(decoder.decode(Status404.self, from: data))
                case 500: self = try .status500(decoder.decode(Status500.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
