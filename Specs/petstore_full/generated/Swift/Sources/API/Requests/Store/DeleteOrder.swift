//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

extension API.Store {

    /** For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors */
    public enum DeleteOrder {

      public static let service = APIService<Response>(id: "deleteOrder", tag: "store", method: "DELETE", path: "/store/order/{order_id}", hasBody: false)

      public class Request: APIRequest<Response> {

          public struct Options {

              /** ID of the order that needs to be deleted */
              public var orderId: String

              public init(orderId: String) {
                  self.orderId = orderId
              }
          }

          public var options: Options

          public init(options: Options) {
              self.options = options
              super.init(service: DeleteOrder.service)
          }

          /// convenience initialiser so an Option doesn't have to be created
          public convenience init(orderId: String) {
              let options = Options(orderId: orderId)
              self.init(options: options)
          }

          public override var path: String {
              return super.path.replacingOccurrences(of: "{" + "orderId" + "}", with: "\(self.options.orderId)")
          }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Invalid ID supplied */
            case failure400

            /** Order not found */
            case failure404

            public var success: Void? {
                switch self {
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
              switch self {
              case .failure400: return 400
              case .failure404: return 404
              }
            }

            public var successful: Bool {
              switch self {
              case .failure400: return false
              case .failure404: return false
              }
            }

            public init(statusCode: Int, data: Data) throws {
                switch statusCode {
                case 400: self = .failure400
                case 404: self = .failure404
                default: throw APIError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
