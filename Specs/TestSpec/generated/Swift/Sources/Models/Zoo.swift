//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Zoo: APIModel {

    public var inlineAnimal: InlineAnimal?

    public var inlineAnimals: [InlineAnimals]?

    public var schemaAnimals: [SingleAnimal]?

    public class InlineAnimal: Animal {

        public override init(animal: String? = nil) {
            super.init(animal: animal)
        }

        public required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
        }

        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
        }

        override public func isEqual(to object: Any?) -> Bool {
          guard object is InlineAnimal else { return false }
          return super.isEqual(to: object)
        }
    }

    public enum InlineAnimals: Codable, Equatable {
        case cat(Cat)
        case dog(Dog)

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)
            let discriminator: String = try container.decode("type")
            switch discriminator {
            case "Cat":
                self = .cat(try Cat(from: decoder))
            case "Dog":
                self = .dog(try Dog(from: decoder))
            default:
                throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .cat(let content):
                try container.encode(content)
            case .dog(let content):
                try container.encode(content)
            }
        }
    }

    public init(inlineAnimal: InlineAnimal? = nil, inlineAnimals: [InlineAnimals]? = nil, schemaAnimals: [SingleAnimal]? = nil) {
        self.inlineAnimal = inlineAnimal
        self.inlineAnimals = inlineAnimals
        self.schemaAnimals = schemaAnimals
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        inlineAnimal = try container.decodeIfPresent("inlineAnimal")
        inlineAnimals = try container.decodeArrayIfPresent("inlineAnimals")
        schemaAnimals = try container.decodeArrayIfPresent("schemaAnimals")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(inlineAnimal, forKey: "inlineAnimal")
        try container.encodeIfPresent(inlineAnimals, forKey: "inlineAnimals")
        try container.encodeIfPresent(schemaAnimals, forKey: "schemaAnimals")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Zoo else { return false }
      guard self.inlineAnimal == object.inlineAnimal else { return false }
      guard self.inlineAnimals == object.inlineAnimals else { return false }
      guard self.schemaAnimals == object.schemaAnimals else { return false }
      return true
    }

    public static func == (lhs: Zoo, rhs: Zoo) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
