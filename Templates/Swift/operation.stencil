
extension {{ tag|upperCamelCase }} {

    {% if description %}
    /** {{ description }} */
    {% endif %}
    public class {{ operationId|upperCamelCase }}: APIRequest {

        {% for enum in enums %}
        public enum {{enum.enumName}} {
            {% for enumCase in enum.enums %}
            case {{enumCase.name}} = "{{enumCase.value}}"
            {% endfor %}
        }
        {% endfor %}
        {% if security %}
        let security = RequestSecurity(type: "{{ security.name }}", scope: "{{ security.scope }}")
        {% endif %}
        {% if nonBodyParams %}

        struct Params {
            {% for param in nonBodyParams %}
            var {{ param.formattedName }}: {{ param.optionalType }}
            {% endfor %}
        }

        var params: Params

        public init(params: Params) {
            self.params = params
        }

        public init({% for param in nonBodyParams %}{{ param.formattedName }}: {{ param.optionalType }}{% ifnot param.required %} = nil{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %}) {
            self.params = Params({% for param in nonBodyParams %}{{param.formattedName}}: {{param.formattedName}}{% ifnot forloop.last %}, {% endif %}{% endfor %})
        }
        {% endif %}
        {% if bodyParam %}

        public var body: {{bodyParam.optionalType}}

        public init({{bodyParam.formattedName}}: {{bodyParam.optionalType}}) {
            self.body = body
        }
        {% endif %}

        public var urlRequest: URLRequest {
            let path = "{{ path }}"{% for param in pathParams %}.replacingOccurrences(of: "{{ param.name }}", with: params.{{ param.decodedValue }}){% endfor %}
            {% if bodyParam %}
            let params:[String:Any?] = {{ bodyParam.decodedValue }}
            {% endif %}
            {% if queryParams %}
            let params:[String:Any?] = [
                {% for param in queryParams %}
                "{{param.name}}": params.{{ param.decodedValue }},
                {% endfor %}
            ]
            {% endif %}
            let url = URL(string: path)
            let urlRequest = URLRequest(url: url)
            urlRequest.httpMethod = "{{ method | uppercase }}"
            return urlRequest
        }

        public init({% for param in params %}{{ param.formattedName }}: {{ param.optionalType }}{% ifnot param.required %} = nil{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %}) {
            let path = "{{ path }}"{% for param in pathParams %}.replacingOccurrences(of: "{{ param.name }}", with: {{ param.decodedValue }}){% endfor %}
            {% if bodyParam %}
            let params:[String:Any?] = {{ bodyParam.decodedValue }}
            {% endif %}
            {% if queryParams %}
            let params:[String:Any?] = [
                {% for param in queryParams %}
                "{{param.name}}": {{ param.decodedValue }},
                {% endfor %}
            ]
            {% endif %}
            {% if security %}
            let security = RequestSecurity(type: "{{security.name}}", scope: "{{security.scope}}")
            {% endif %}
            super.init(path: path, method: "{{ method | uppercase }}", params: params)
        }

        static func decode(json: Any) throws -> {% if successType %}{{successType}}{% else %}Void{% endif %} {
            {% if successType %}{% if successResponse.schema.isArray %}guard let array = json as? [JSONDictionary] else { throw DecodingError() }
            return try array.map({{successResponse.schema.arrayType}}.init){% endif %}{% if successResponse.schema.isDictionary %}guard let jsonDictionary = json as? JSONDictionary else { throw DecodingError() }
            let dictionary: {{successType}} = [:]
            for (key, value in jsonDictionary) {
                dictionary[key] = try {{successResponse.schema.dictionaryType}}(jsonDictionary: value)
            }
            return dictionary{% endif %}{% if not successResponse.schema.isDictionary and not successResponse.schema.isArray%}guard let jsonDictionary = json as? JSONDictionary else { throw DecodingError() }
            return try {{successType}}(jsonDictionary: jsonDictionary)
            {% endif %}{%else%}return{% endif %}
        }
    }

}
