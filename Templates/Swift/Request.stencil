import JSONUtilities

extension API.{{ tag|upperCamelCase }} {

    {% if description %}
    /** {{ description }} */
    {% endif %}
    public struct {{ operationId|upperCamelCase }}: APIRequest{% if security %}, Authorized{% endif %} {

        public typealias ResponseType = {{successType|default:"Void"}}
        {% for enum in enums %}

        public enum {{enum.enumName}}: String {
            {% for enumCase in enum.enums %}
            case {{enumCase.name}} = "{{enumCase.value}}"
            {% endfor %}
        }
        {% endfor %}
        {% if security %}

        public let authorization = Authorization(type: "{{ security.name }}", scope: "{{ security.scope }}")
        {% endif %}
        {% if nonBodyParams %}

        public struct Params {
            {% for param in nonBodyParams %}
            public var {{ param.formattedName }}: {{ param.optionalType }}
            {% endfor %}
        }

        public var params: Params

        public init(params: Params) {
            self.params = params
        }

        public init({% for param in nonBodyParams %}{{ param.formattedName }}: {{ param.optionalType }}{% ifnot param.required %} = nil{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %}) {
            self.params = Params({% for param in nonBodyParams %}{{param.formattedName}}: {{param.formattedName}}{% ifnot forloop.last %}, {% endif %}{% endfor %})
        }
        {% endif %}
        {% if bodyParam %}

        public var body: {{bodyParam.optionalType}}

        public init({{bodyParam.formattedName}}: {{bodyParam.optionalType}}) {
            self.body = body
        }
        {% endif %}

        public var path: String {
            return "{{ path }}"{% for param in pathParams %}.replacingOccurrences(of: "{{ param.name }}", with: self.params.{{ param.encodedValue }}){% endfor %}
        }

        public var method: String {
            return "{{ method|uppercase }}"
        }

        public var hasBody: Bool {
            return {% if hasBody %}true{% else %}false{% endif %}
        }

        public var urlParams: [String: Any] {
            {% if bodyParam %}
            return {{ bodyParam.encodedValue }}
            {% endif %}
            {% if queryParams %}
            var params: JSONDictionary = [:]
            {% for param in queryParams %}
            {% if param.optional %}
            if let {{ param.formattedName }} = self.params.{{ param.encodedValue }} {
              params["{{ param.value }}"] = {{ param.formattedName }}
            }
            {% else %}
            params["{{ param.value }}"] = self.params.{{ param.encodedValue }}
            {% endif %}
            {% endfor %}
            return params
            {% else %}
            return [:]
            {% endif %}
        }

        public func decode(json: Any) throws -> {{successType|default:"Void"}} {
            {% if successType %}
            {% if successResponse.schema.isArray %}
            guard let array = json as? [JSONDictionary] else { throw JSONUtilsError.fileNotAJSONDictionary }
            return try array.map({{successResponse.schema.arrayType}}.init)
            {% endif %}
            {% if successResponse.schema.isDictionary %}
            guard let jsonDictionary = json as? JSONDictionary else { throw JSONUtilsError.fileNotAJSONDictionary }
            var dictionary: {{successType}} = [:]
            for (key, value) in jsonDictionary {
                dictionary[key] = try jsonDictionary.json(atKeyPath: key)
            }
            return dictionary
            {% endif %}
            {% if not successResponse.schema.isDictionary and not successResponse.schema.isArray%}
            guard let jsonDictionary = json as? JSONDictionary else { throw JSONUtilsError.fileNotAJSONDictionary }
            return try {{successType}}(jsonDictionary: jsonDictionary)
            {% endif %}
            {% else %}
            return
            {% endif %}
        }
    }

}
